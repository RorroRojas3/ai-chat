// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RR.AI_Chat.Repository;

#nullable disable

namespace RR.AI_Chat.Repository.Migrations
{
    [DbContext(typeof(AIChatDbContext))]
    partial class AIChatDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RR.AI_Chat.Entity.AIService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("AIService", "AI.Ref");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89440e45-346f-453b-8e31-a249e4c6c0c5"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Ollama"
                        },
                        new
                        {
                            Id = new Guid("3ad5a77e-515a-4b72-920b-7e4f1d183dfe"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "OpenAI"
                        },
                        new
                        {
                            Id = new Guid("9f29b328-8e63-4b87-a78d-51e96a660135"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "AzureOpenAI"
                        });
                });

            modelBuilder.Entity("RR.AI_Chat.Entity.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Document", "AI");
                });

            modelBuilder.Entity("RR.AI_Chat.Entity.DocumentPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.PrimitiveCollection<string>("Embedding")
                        .IsRequired()
                        .HasColumnType("vector(768)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentPage", "AI");
                });

            modelBuilder.Entity("RR.AI_Chat.Entity.Model", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AIServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsToolEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("AIServiceId");

                    b.ToTable("Model", "AI.Ref");

                    b.HasData(
                        new
                        {
                            Id = new Guid("157b91cf-1880-4977-9b7a-7f80f548df04"),
                            AIServiceId = new Guid("89440e45-346f-453b-8e31-a249e4c6c0c5"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsToolEnabled = false,
                            Name = "llama3.2"
                        },
                        new
                        {
                            Id = new Guid("9910ba5f-faca-4790-88a4-352e71e14724"),
                            AIServiceId = new Guid("89440e45-346f-453b-8e31-a249e4c6c0c5"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsToolEnabled = false,
                            Name = "mistral"
                        },
                        new
                        {
                            Id = new Guid("1fe5381b-0262-469a-b63e-f4d0c4807a98"),
                            AIServiceId = new Guid("89440e45-346f-453b-8e31-a249e4c6c0c5"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsToolEnabled = false,
                            Name = "gemma3"
                        },
                        new
                        {
                            Id = new Guid("1983e31e-627d-4617-9320-17ded79efa2b"),
                            AIServiceId = new Guid("3ad5a77e-515a-4b72-920b-7e4f1d183dfe"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsToolEnabled = true,
                            Name = "gpt-4.1-nano"
                        },
                        new
                        {
                            Id = new Guid("e9bc0791-2d15-43c8-9299-5c86039786f9"),
                            AIServiceId = new Guid("3ad5a77e-515a-4b72-920b-7e4f1d183dfe"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsToolEnabled = true,
                            Name = "gpt-4.1-mini"
                        },
                        new
                        {
                            Id = new Guid("a24fcce0-02e7-4ecb-88d7-27f33e47fecf"),
                            AIServiceId = new Guid("9f29b328-8e63-4b87-a78d-51e96a660135"),
                            DateCreated = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsToolEnabled = true,
                            Name = "gpt-4.1-nano"
                        });
                });

            modelBuilder.Entity("RR.AI_Chat.Entity.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Conversations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeactivated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<long>("InputTokens")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("OutputTokens")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Session", "AI");
                });

            modelBuilder.Entity("RR.AI_Chat.Entity.Document", b =>
                {
                    b.HasOne("RR.AI_Chat.Entity.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("RR.AI_Chat.Entity.DocumentPage", b =>
                {
                    b.HasOne("RR.AI_Chat.Entity.Document", "Document")
                        .WithMany("Pages")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("RR.AI_Chat.Entity.Model", b =>
                {
                    b.HasOne("RR.AI_Chat.Entity.AIService", "AIService")
                        .WithMany()
                        .HasForeignKey("AIServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AIService");
                });

            modelBuilder.Entity("RR.AI_Chat.Entity.Document", b =>
                {
                    b.Navigation("Pages");
                });
#pragma warning restore 612, 618
        }
    }
}
